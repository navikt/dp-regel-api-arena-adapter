name: Build and deploy

on:
  push:
    paths-ignore:
      - 'web/**'
      - 'openapi/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/deploy-openapi.yaml'
      - 'README.md'
    branches-ignore:
      - 'dependabot/**'


env:
  IMAGE: docker.pkg.github.com/${{ github.repository }}/dp-regel-api-arena-adapter:${{ github.sha }}
jobs:
  build:
    name: Build and publish Docker image
    runs-on: ubuntu-latest
    permissions: # Sjekk https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
      contents: write
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - uses: gradle/wrapper-validation-action@v3.5.0
      - uses: gradle/gradle-build-action@v3.5.0
        env:
          # Eksluder test dependencies
          DEPENDENCY_GRAPH_INCLUDE_CONFIGURATIONS: compileClasspath|runtimeClasspath
        with:
          gradle-version: wrapper
          dependency-graph: generate-and-submit
          arguments: --configuration-cache build installDist

      - name: docker-build-push
        uses: nais/docker-build-push@v0
        if: github.ref == 'refs/heads/master'
        id: docker-build-push
        with:
          team: teamdagpenger
          push_image: true # optional, default true
          tag: ${{ github.sha }}
          dockerfile: Dockerfile # optional, default Dockerfile
          docker_context: . # optional, default .
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}

      - name: Archive NAIS yaml
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v4
        with:
          name: nais-yaml
          path: nais

    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}

  deploy-dev:
    name: Deploy to dev
    needs: [build]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: dev-fss
    steps:
      - name: Fetch NAIS yaml
        uses: actions/download-artifact@v4
        with:
          name: nais-yaml
          path: nais

      - uses: nais/deploy/actions/deploy@v2
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: nais/nais.yaml
          VAR: image=${{ needs.build.outputs.image }}
          VARS: nais/dev-vars.yaml
          PRINT_PAYLOAD: true

  deploy-t5-instans:
    name: Deploy to t5
    needs: [build]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: dev-fss
    steps:
      - name: Fetch NAIS yaml
        uses: actions/download-artifact@v4
        with:
          name: nais-yaml
          path: nais

      - uses: nais/deploy/actions/deploy@v2
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: nais/t5/nais.yaml
          VAR: image=${{ needs.build.outputs.image }}
          PRINT_PAYLOAD: true


  deploy-prod:
    name: Deploy to Production
    needs: [build, deploy-dev]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: prod-fss
    steps:
      - name: Fetch NAIS yaml
        uses: actions/download-artifact@v4
        with:
          name: nais-yaml
          path: nais

      - uses: nais/deploy/actions/deploy@v2
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-fss
          RESOURCE: nais/nais.yaml
          VAR: image=${{ needs.build.outputs.image }}
          VARS: nais/prod-vars.yaml
          PRINT_PAYLOAD: true
